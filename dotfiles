#!/bin/sh

# get script directory
DOTFILES_DIR=$(readlink -m "${0%/*}")

prompt() {
	echo $1
	read -p "  (y/n) " ans
	case $ans in
		y|Y)
			retval=0
			;;
		*)
			retval=1
	esac
	return "$retval"
}

mkdir_if_none() {
	if [ ! -d $1 ]; then
		mkdir $1
	fi
}

update_gitmodules() {
	echo "Updating git submodules"
	git submodule update --init --recursive
}

update_vim_plugins() {
	echo "installing vim plugins"
	vim +BundleClean +BundleInstall! +qall
}

link_dotfiles() {
	echo "linking vim config"
	ln -s $DOTFILES_DIR/vim/vimrc $HOME/.vimrc           #  vim- config
	ln -s $DOTFILES_DIR/vim $HOME/.vim                   #  vim- config directory
	update_vim_plugins
	echo "linking zsh config"
	ln -s $DOTFILES_DIR/zsh/zshrc $HOME/.zshrc           #  zsh- config
	ln -s $DOTFILES_DIR/zsh $HOME/.zsh                   #  zsh- config directory
	ln -s $DOTFILES_DIR/zsh/zprofile $HOME/.zprofile     #  zsh- profile
	echo "linking tmux config"
	ln -s $DOTFILES_DIR/tmux/tmux.conf $HOME/.tmux.conf  # tmux- config
	echo "linking x11 config"
	ln -s $DOTFILES_DIR/x11/Xresources $HOME/.Xresources #  x11- resources
	echo "linking i3 config"
	ln -s $DOTFILES_DIR/i3 $HOME/.i3                     #   i3- config directory
	cd $DOTFILES_DIR
	# powerline config
	echo "linking Powerline config"
	mkdir_if_none $HOME/.config
	rm -rf $HOME/.config/powerline
	ln -s $DOTFILES_DIR/powerline $HOME/.config/powerline
}

remove_dotfiles() {
	echo "removing vim config"
	rm -f $HOME/.vimrc      # rm  vim- config
	rm -rf $HOME/.vim       # rm  vim- config directory + plugins
	echo "removing zsh config"
	rm -f $HOME/.zshrc      # rm  zsh- config
	rm -rf $HOME/.zsh       # rm  zsh- config directory + plugins
	rm -f $HOME/.zprofile   # rm  zsh- profile
	echo "removing tmux config"
	rm -f $HOME/.tmux.conf  # rm tmux- config
	echo "removing x11 config"
	rm -f $HOME/.Xresources # rm  x11- resources
	echo "removing i3 config"
	rm -rf $HOME/.i3        # rm   i3- config directory
	echo "removing Powerline config"
	rm -rf $HOME/.config/powerline
}

cache_fonts() {
	echo "caching fonts"
	mkdir_if_none $HOME/.fonts
	find $DOTFILES_DIR/fonts/ -type f \( ! -iname "*.rst" ! -iname "*.markdown" ! -iname "*.txt" \) -exec ln -sf {} $HOME/.fonts/ \;
	fc-cache -vf $HOME/.fonts
}

build_youcompleteme() {
	echo "building YouCompleteMe"
	cd $DOTFILES_DIR/vim/bundle/YouCompleteMe
	if prompt "Use the system libclang? (required version > 3.3)"; then
		./install.sh --clang-completer --system-libclang --omnisharp-completer
	else
		./install.sh --clang-completer --omnisharp-completer
	fi
	cd $DOTFILES_DIR
}

install() {
	update_gitmodules
	# prompt user
	if prompt "WARNING: This will destroy any existing config files! Continue?"; then
		# remove default config files/dirs
		remove_dotfiles
		# symlink global config
		link_dotfiles
		# cache fonts
		cache_fonts
		# conditionally build YouCompleteMe.vim
		if prompt "Do you want to build YouCompleteMe.vim? (Should only be done if prompted to by YCM when starting vim.)"; then
			build_youcompleteme
		fi
	fi
}

uninstall() {
	remove_dotfiles
}

case $1 in
install)
	install
	;;
reinstall)
	uninstall
	install
	;;
uninstall)
	uninstall
	;;
update)
	update_gitmodules
	update_vim_plugins
	;;
*)
	echo "Options:"
	echo "  install   - symlink dotfiles and build extras (if necessary)"
	echo "  uninstall - remove all dotfile links"
	echo "  reinstall - uninstall and install"
	echo "  update    - update git submodules and vundle packages"
	;;
esac
