# main(argc, argv)
snippet main
	int main(int argc, const char** argv) {
		${1}
		return 0;
	}
# main(void)
snippet mainn
	int main(void) {
		${1}
		return 0;
	}
# #include <...>
snippet Inc
	#include <${1:stdio.h}>${2}
# #include "..."
snippet inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
# #define
snippet def
	#define${1}
# #ifdef
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
# #if
snippet #if
	#if ${1:CONDITION}
		${2}
	#endif
# header guard
snippet guard
	#ifndef ${1:`toupper(Filename('_$1_H_', '_UNTITLED_H_'))`}
	#define $1

	${2}

	#endif /* $1 */
# if
snippet if
	if (${1:/* condition */}) {
		${2}
	}
# else if
snippet elif
	else if (${1:/* condition */}) {
		${2}
	}
# else
snippet el
	else {
		${1}
	}
# ternary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# do ... while
snippet do
	do {
		${2}
	} while (${1:/* condition */});
# while
snippet wh
	while (${1:/* condition */}) {
		${2}
	}
# for
snippet for
	for (${2:int }${3:i} = 0; $3 < ${1:10}; $3++) {
		${4}
	}
# for (custom)
snippet forr
	for (${1:int }${2:i} = ${3:0}; ${4:$2 < 10}; ${5:$2++}) {
		${6}
	}
# function
snippet fun
	${1:void} ${2:function}(${3}) {
		${4}
	}
# function prototype
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# typedef
snippet td
	typedef ${1:int} ${2:type_t};${3}
# struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2}
	}${3};${4}
# typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3}
	} ${1:`Filename('$1_t', 'name')`};
# typedef enum
snippet tde
	typedef enum {
		${1}
	} ${2:type_e};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
