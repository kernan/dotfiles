set nocompatible

" pathogen
runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

" set leader
let mapleader="\\"
let g:mapleader="\\"

" history size
set history=1000
set undoreload=1000

" temporary files
set backupdir=$HOME/.vimbak//
set undodir=$HOME/.vimundo//
set directory=$HOME/.vimswap//
set undofile   " enable undo files
set backup     " enable backup files
set noswapfile " disable swap files

" input
set pastetoggle=<F2>
set mouse=a
set backspace=2
set clipboard=unnamed

" automatically read file changes
set autoread
set hidden

" enable filetype specific settings
filetype plugin on
filetype indent on

" timeout length
set ttimeoutlen=100
set timeoutlen=3000
set noesckeys

" toggle menu
if has('gui_running')
	nnoremap <f1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<cr>
endif

" disable error bells
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" show screen title
set title
" set text display options
set shortmess =a " use all abbreviations
set shortmess+=t " truncate file message if too long
set shortmess+=s " remove 'search hit TOP/BOTTOM' message
set shortmess+=o " file-read message overwrites file-written message
set shortmess+=O " file-read message overwrites any message
set shortmess+=I " remove intro message

" show current mode
set showmode
" show partial commands
set showcmd
" automatically hide buffers
set hidden
" smooth terminal redrawing
set ttyfast
" don't redraw in macros
set lazyredraw
" enable line position
set ruler

" line numbers
set number
set norelativenumber
" toggle line numbers
nnoremap <leader>nn :setlocal number!<cr>
nnoremap <leader>nr :setlocal relativenumber!<cr>

" always show statusline
set laststatus=2

" disable background color erase
set t_ut=

" set invisible characters
set listchars=tab:▸\ ,eol:¬,extends:»,precedes:«
set showbreak=…
set list
set synmaxcol=800
" toggle invisibles
nnoremap <leader>l :setlocal list!<cr>

" completion
" set complete=w,a,m,i,k,i,d,e
set completeopt=menu,menuone,longest

" resize splits when window is resized
if has('autocmd')
	augroup ResizeSplits
		autocmd!
		autocmd VimResized * :wincmd =
	augroup END
endif

" show current cursorline
set cursorline

" gvim appearance
if has('gui_running')
	set guioptions-=T " remove toolbar
	set guioptions-=m " remove menu
	set guioptions+=g " grey menu items
	set guioptions-=c " hide intro
	set guioptions-=i " hide scrollbars
	set guioptions-=r " hide scrollbars
	set guioptions-=L " hide scrollbars
	set guioptions-=l " hide scrollbars
	set guifont=Meslo\ LG\ S\ for\ Powerline\ 8
endif

" enable wildmenu
set wildmenu
set wildmode=longest:full,full
" things to ignore
set wildignore+=.hg,.git,.svn                    " version control files
set wildignore+=*.aux,*.out,*.toc                " LaTeX build files
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.class                          " java compiled objects
set wildignore+=*.luac                           " lua byte code
set wildignore+=*.pyc                            " python byte code
set wildignore+=*.sw                             " vim swap files
set wildignore+=*.DS_Store                       " OSX something

" set tab width using a nice prompt
command! -nargs=* Stab call SetTab()
function! SetTab()
	let l:tabstop = 1 * input("set tabstop = softtabstop = shiftwidth = ")
	if l:tabstop > 0
		let &l:tw = l:tabstop
		let &l:sts = l:tabstop
		let &l:sw = l:tabstop
	endif
	let l:et = input("set expandtab = ")
	if l:et == "no"
		setlocal noexpandtab
	else
		setlocal expandtab
	end
	echo
	echo "\n"
	call SummarizeTabs()
endfunction

" summarize current tab info
function! SummarizeTabs()
	try
		echoh ModeMsg
		echon "tabstop=" &l:ts " softtabstop=" &l:sts " shiftwidth=" &l:sw ' '
		if &l:et
			echon "expandtab"
		else
			echon "noexpandtab"
		endif
	finally
		echoh None
	endtry
endfunction

" tabwidth (default)
set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab

" formatting
set wrap
set textwidth=80
set formatoptions =c " auto-wrap comments using textwidth
set formatoptions+=q " allow comment formatting using 'gq'
set formatoptions+=r " automatically insert comment leader on <Enter>
set formatoptions+=n " format numbered lists
set formatoptions+=j " remove comment leaders (where it makes sense)

" auto indentation
set autoindent
set smartindent
set shiftround

" increase/decrease indent
vnoremap > >gv
vnoremap < <gv

" auto-indent options
set cinoptions+=L-1 " indent of labels -> none
set cinoptions+=:0  " indent of cases -> none
set cinoptions+=l1  " indent of block after case -> align with case statement
set cinoptions+=g0  " indent of scope declarations -> none
set cinoptions+=N-s " indent of statements inside namespace -> none
set cinoptions+=(0  " indent of line continuations with unclosed parens -> line up with open-paren
set cinoptions+=j1  " indent Java anonymous classes correctly

" omni-completion
set omnifunc=syntaxcomplete#Complete

" regex magic
set magic
" smart ignore case
set smartcase
" incremental search (modern)
set incsearch
" highlight previous searches
set hlsearch
" show bracket matches
set showmatch
set matchtime=2
" substitude all matches on a line
set gdefault
" clear search buffer
nnoremap <leader>, :nohlsearch<cr>call clearmatches()<cr>
" easier system paste
noremap <leader>y "*y
noremap <leader>p :set paste<cr>:put *<cr>:set nopaste<cr>

" movement
set scrolloff=5
cnoremap <c-h> <left>
cnoremap <c-l> <right>

" bubble lines
nnoremap <c-j> :move +1<cr>
nnoremap <c-k> :move -2<cr>
vnoremap <c-j> :move '>+<cr>gv
vnoremap <c-k> :move -2<cr>gv

" filetype specific settings
if has('autocmd')
	augroup FileTypeSpecific
		autocmd!
		" Tabs
		autocmd FileType ruby,eruby setlocal ts=2 sts=2 sw=2 expandtab
		autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
	augroup END
endif

" Coloscheme
syntax on
let g:rehash256=1
colorscheme molokai

" ctrlp
let g:ctrlp_map='<leader>t'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip    " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe " Windows

" DelimitMate
let g:delimitMate_autoclose=1
" TODO Determine match pairs based on filetype.
" let g:delimitMate_matchpairs="(:),[:],{:},<:>"
let g:delimitMate_matchpairs="(:),[:],{:}"
let g:delimitMate_smart_matchpairs=1
let g:delimitMate_balance_matchpairs=1
let g:delimitMate_quotes="\" '"
let g:delimitMate_smart_quotes=1
let g:delimitMate_expand_cr=1
let g:delimitMate_expand_space=1
let g:delimitMate_excluded_regions="Comment"

" DoxyGen
let g:load_doxygen_syntax=0

" Powerline
set noshowmode
set runtimepath+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim

" Syntastic
let g:syntastic_auto_loc_list=1
let g:syntastic_loc_list_height=5
let g:syntastic_check_on_open=1
let g:syntastic_echo_current_error=0
let g:syntastic_enable_signs=1
let g:syntastic_enable_highlighting=0
let g:syntastic_quiet_warnings=0
let g:syntastic_error_symbol='>>'
let g:syntastic_style_error_symbol='S>'
let g:syntastic_warning_symbol='>>'
let g:syntastic_style_warning_symbol='S>'
" C
let g:syntastic_c_compiler='clang'
let g:syntastic_c_check_header=1
let g:syntastic_c_no_default_include_dirs=1
let g:syntastic_c_auto_refresh_includes=1
let g:syntastic_c_compiler_options=' -std=c11'
let g:syntastic_c_include_dirs=[ 'inc', 'include' ]
" C++
let g:syntastic_cpp_compiler='clang++'
let g:syntastic_cpp_check_header=1
let g:syntastic_cpp_no_default_include_dirs=1
let g:syntastic_cpp_auto_refresh_includes=1
let g:syntastic_cpp_compiler_options=' -std=c++11'
let g:syntastic_cpp_include_dirs=[ 'inc', 'include' ]
