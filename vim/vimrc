" -----
" Setup
" -----
if has('vim_starting')
	set nocompatible
	filetype off
	set runtimepath+=$HOME/.vim/bundle/neobundle
endif

let g:neobundle#enable_name_conversion=1

call neobundle#rc(expand('~/.vim/bundle'))

NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'Shougo/vimproc', {
			\   'build' : {
			\       'unix'   : 'make -f make_unix.mak',
			\       'mac'    : 'make -f make_mac.mak',
			\       'cygwin' : 'make -f make_cygwin.mak',
			\       'windows': 'make -f make_mingw32.mak'
			\   }
			\}

" appearance
NeoBundle 'tomasr/molokai'
NeoBundle 'bling/vim-airline', {'augroup': 'airline'}

" languages
NeoBundle 'Blackrush/vim-gocode'
NeoBundleLazy 'elzr/vim-json', {'filetypes': 'json'}
NeoBundleLazy 'hail2u/vim-css3-syntax', {'filetypes': 'css'}
NeoBundleLazy 'hynek/vim-python-pep8-indent', {'filetypes': 'python'}
NeoBundleLazy 'othree/html5.vim', {'filetypes': 'html'}
NeoBundleLazy 'pangloss/vim-javascript', {'filetypes': 'javascript'}
NeoBundle 'tikhomirov/vim-glsl'
NeoBundle 'tpope/vim-git'
NeoBundle 'tpope/vim-rails', {'augroup': 'railsPluginDetect'}
NeoBundleLazy 'vim-ruby/vim-ruby', {'filetypes': 'ruby'}

" unite
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-session', {'depends': 'Shougo/unite.vim'}
NeoBundle 'Shougo/unite-outline', {'depends': 'Shougo/unite.vim'}

" other
NeoBundleLazy 'derekwyatt/vim-fswitch', {'autoload': {'filetypes': ['c', 'cpp']}}
NeoBundle 'godlygeek/tabular'
NeoBundle 'kana/vim-textobj-entire', {'depends': 'kana/vim-textobj-user'}
NeoBundleLazy 'mattn/emmet-vim', {'autoload': {'filetypes': ['css', 'html']}}
NeoBundle 'mhinz/vim-signify', {'augroup': 'signify'}
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'sjl/gundo.vim'
NeoBundleLazy 'skammer/vim-css-color', {'autoload': {'filetypes': 'css'}}
NeoBundle 'SirVer/ultisnips'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-fugitive', {'augroup': 'fugitive'}
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'Valloric/YouCompleteMe', {
			\   'build': {
			\       'unix'  : './install.sh --clang-completer --omnisharp-completer',
			\       'mac'   : './install.sh --clang-completer --omnisharp-completer',
			\       'cygwin': './install.sh --clang-completer --omnisharp-completer'
			\   }
			\}
NeoBundle 'xolox/vim-easytags', {'depends': 'xolox/vim-misc'}

" --------
" Settings
" --------
function! MkdirIfNone(dir)
	if !isdirectory(a:dir)
		if exists('*mkdir')
			call mkdir(a:dir, 'p')
			echo 'created directory: ' . a:dir
		else
			echo 'cannot make directory: ' . a:dir
		endif
	endif
endfunction

call MkdirIfNone(expand('~/.vim/undo'))

filetype plugin indent on
set omnifunc=syntaxcomplete#Complete

let mapleader="\\"
let g:mapleader="\\"

set history=1000
set undoreload=1000
set undodir=$HOME/.vim/undo
set undofile   " enable undo files
set nobackup   " disable backup files
set noswapfile " disable swap files
set pastetoggle=<F2>
set mouse=a " enable all mouse modes
if has('unnamedplus')
	" properly handle system clipboard in x11
	set clipboard=unnamedplus,unnamed
else
	set clipboard+=unnamed
endif
set modeline
set modelines=5
set backspace=indent,eol,start
set autoread " automatically read file changes
set hidden " automatically manage hidden buffers
set ttimeoutlen=100
set timeoutlen=3000
set noerrorbells novisualbell t_vb=
set shortmess =a " use all abbreviations
set shortmess+=t " truncate file message if too long
set shortmess+=s " remove 'search hit TOP/BOTTOM' message
set shortmess+=o " file-read message overwrites file-written message
set shortmess+=O " file-read message overwrites any message
set shortmess+=I " remove intro message
set showcmd " show partial command on the last line
set ttyfast " smoother redraw with multiple windows
set lazyredraw " disable screen draw during macros
set t_ut= " clear background, fixes background in tmux
set number " show line numbers
set norelativenumber " don't use relative numbers
set laststatus=2 " always show the status bar
set noshowmode   " don't show mode
set listchars=tab:▸\ ,eol:¬,extends:»,precedes:«
set showbreak=…
set list " show hidden characters
set synmaxcol=800 " max column for syntax highlighting
set completeopt=menu,menuone,longest
set cursorline " highlight the current cursor line
set wildmenu " enable wildmenu
set wildmode=longest:full,full
set wildignore+=.hg,.git,.svn                    " version control files
set wildignore+=*.aux,*.out,*.toc                " LaTeX build files
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.class                          " java compiled objects
set wildignore+=*.luac                           " lua byte code
set wildignore+=*.pyc                            " python byte code
set wildignore+=*.sw                             " vim swap files
set wildignore+=*.DS_Store                       " OSX something
set tabstop=4     " number of spaces a tab appears as
set shiftwidth=4  " number of spaces to use for each step of (auto)indent
set softtabstop=4 " number of spaces a tab counts for while editing
set noexpandtab   " do not expand tabs to spaces
set wrap         " wrap displayed text
set textwidth=80 " wrap to 80 columns
set formatoptions =c " auto-wrap comments using textwidth
set formatoptions+=q " allow comment formatting using 'gq'
set formatoptions+=r " automatically insert comment leader on <Enter>
set formatoptions+=n " format numbered lists
set formatoptions+=j " remove comment leaders (where it makes sense)
set autoindent  " copy indentation from previous line when starting a new one
set smartindent " smart indent new lines
set shiftround  " round indent to multiple of shiftwidth
set cinoptions+=L-1 " indent of labels -> none
set cinoptions+=:0  " indent of cases -> none
set cinoptions+=l1  " indent of block after case -> align with case statement
set cinoptions+=g0  " indent of scope declarations -> none
set cinoptions+=N-s " indent of statements inside namespace -> none
set cinoptions+=j1  " indent Java anonymous classes correctly
set magic      " use special characters in search patterns
set ignorecase " ignore case of search term
set smartcase  " stop ignoring case when search pattern includes upper-case characters
set incsearch  " show matches as the command is being type
set hlsearch   " highlight all search results
set gdefault   " substitute all matches on a line by default
set scrolloff=3
if has('gui_running')
	set guioptions-=T " remove toolbar
	set guioptions-=m " remove menu
	set guioptions+=g " grey menu items
	set guioptions-=c " hide intro
	set guioptions-=i " hide scrollbars
	set guioptions-=r " hide scrollbars
	set guioptions-=L " hide scrollbars
	set guioptions-=l " hide scrollbars
	set guifont=Meslo\ LG\ M\ 8
endif

if has('autocmd')
	" Automatically resize splits on window resize
	augroup ResizeSplits
		autocmd!
		autocmd VimResized * :wincmd =
	augroup END
endif

" -----------
" Colorscheme
" -----------
syntax on

let bundle=neobundle#get('molokai')
function! bundle.hooks.on_source(bundle)
	let g:rehash256=1
	set background=dark
	colorscheme molokai

	highlight DiffAdd                   guibg=PaleGreen guifg=bg     gui=none
	highlight DiffDelete                guibg=Tomato    guifg=bg     gui=none
	highlight DiffChange                guibg=Khaki     guifg=bg     gui=none
	highlight DiffText                  guibg=SkyBlue3  guifg=bg     gui=none
	highlight SignifySignAdd            guibg=#232526   guifg=Green  gui=none
	highlight SignifySignDelete         guibg=#232526   guifg=Red    gui=none
	highlight SignifySignChange         guibg=#232526   guifg=Yellow gui=none
	highlight SyntasticErrorSign        guibg=#232526   guifg=Red    gui=none
	highlight SyntasticWarningSign      guibg=#232526   guifg=Yellow gui=none
	highlight SyntasticStyleErrorSign   guibg=#232526   guifg=Red    gui=none
	highlight SyntasticStyleWarningSign guibg=#232526   guifg=Yellow gui=none
	" 256-color terminal
	if &t_Co > 255
		highlight DiffAdd                   ctermbg=120 ctermfg=bg  cterm=none
		highlight DiffDelete                ctermbg=202 ctermfg=bg  cterm=none
		highlight DiffChange                ctermbg=192 ctermfg=bg  cterm=none
		highlight DiffText                  ctermbg=74  ctermfg=bg  cterm=none
		highlight SignifySignAdd            ctermbg=235 ctermfg=28  cterm=none
		highlight SignifySignDelete         ctermbg=235 ctermfg=196 cterm=none
		highlight SignifySignChange         ctermbg=235 ctermfg=226 cterm=none
		highlight SyntasticErrorSign        ctermbg=235 ctermfg=196 cterm=none
		highlight SyntasticWarningSign      ctermbg=235 ctermfg=226 cterm=none
		highlight SyntasticStyleErrorSign   ctermbg=235 ctermfg=196 cterm=none
		highlight SyntasticStyleWarningSign ctermbg=235 ctermfg=226 cterm=none
	endif
endfunction

" -------
" Plugins
" -------
" Airline
let bundle=neobundle#get('airline')
function! bundle.hooks.on_source(bundle)
	let g:airline#extensions#syntastic_enabled=1
	let g:airline#extensions#hunks#enabled=1
	let g:airline#extensions#hunks#non_zero_only=1
	let g:airline_left_sep=''
	let g:airline_left_alt_sep='›'
	let g:airline_right_sep=''
	let g:airline_right_alt_sep='‹'
	let g:airline_theme='powerlineish'
	if !exists('g:airline_symbols')
		let g:airline_symbols={}
	endif
	let g:airline_symbols.branch=''
	let g:airline_symbols.linenr='¶'
	let g:airline_symbols.paste='PASTE'
	let g:airline_symbols.readonly='RO'
	call airline#parts#define_raw('modified', '%{&modified ? " +" : ""}')
	call airline#parts#define_accent('modified', 'red')
	let g:airline_section_c = airline#section#create(['%f', 'modified'])
endfunction

" CSS Color
let bundle=neobundle#get('css-color')
function! bundle.hooks.on_source(bundle)
	let g:cssColorVimDoNotMessMyUpdatetime=1
endfunction

" DelimitMate
let bundle=neobundle#get('delimitMate')
function! bundle.hooks.on_source(bundle)
	let g:delimitMate_autoclose=1
	let g:delimitMate_matchpairs="(:),[:],{:}"
	let g:delimitMate_smart_matchpairs=1
	let g:delimitMate_balance_matchpairs=1
	let g:delimitMate_quotes="\" '"
	let g:delimitMate_smart_quotes=1
	let g:delimitMate_expand_cr=1
	let g:delimitMate_expand_space=0
	let g:delimitMate_excluded_regions="Comment"
	if has('autocmd')
		" Filetype specific match pairs settings
		augroup FileTypeQuotes
			autocmd!
			autocmd FileType vim let b:delimitMate_quotes="'"
		augroup END
		augroup FileTypePairs
			autocmd!
		augroup END
	endif
endfunction

" EasyTags
let bundle=neobundle#get('easytags')
function! bundle.hooks.on_source(bundle)
	set tags=./tags;/
	let g:easytags_dynamic_files=1
	call MkdirIfNone(expand('~/.vim/tags'))
	let g:easytags_by_filetype=expand('~/.vim/tags')
	let g:easytags_auto_highlight=0
	let g:easytags_updatetime_warn=0
	let g:easytags_include_members=0
endfunction

" Emmet
let bundle=neobundle#get('emmet')
function! bundle.hooks.on_source(bundle)
	let g:use_emmet_complete_tag=1
	let g:emmet_html5=1
endfunction

" Fugitive
let bundle=neobundle#get('fugitive')
function! bundle.hooks.on_source(bundle)
	if has('autocmd')
		augroup AutoCloseFugitiveBuffers
			autocmd!
			autocmd BufReadPost fugitive://* setlocal bufhidden=delete
		augroup END
	endif
endfunction

" Gocode
let bundle=neobundle#get('gocode')
function! bundle.hooks.on_source(bundle)
	if has('autocmd')
		" FIXME Temporary fix for Fmt not working on the first file.
		augroup AutoformatGo
			autocmd!
			autocmd FileType go autocmd BufWritePre <buffer> :keepjumps Fmt
		augroup END
	endif
endfunction

" Gundo
let bundle=neobundle#get('gundo')
function! bundle.hooks.on_source(bundle)
	let g:gundo_width=30
	let g:gundo_preview_height=10
	let g:gundo_preview_bottom=1
	let g:gundo_right=1
	let g:gundo_help=0
	nmap <f4> :GundoToggle<cr>
endfunction

" Signify
let bundle=neobundle#get('signify')
function! bundle.hooks.on_source(bundle)
	let g:signify_sign_overwrite=0
	let g:signify_sign_add='+'
	let g:signify_sign_change='~'
	let g:signify_sign_delete='-'
	let g:signify_sign_delete_first_line='^'
endfunction

" Syntastic
let bundle=neobundle#get('syntastic')
function! bundle.hooks.on_source(bundle)
	let g:syntastic_check_on_wq=0
	let g:syntastic_auto_loc_list=1
	let g:syntastic_loc_list_height=5
	let g:syntastic_check_on_open=1
	let g:syntastic_echo_current_error=0
	let g:syntastic_enable_signs=1
	let g:syntastic_enable_highlighting=0
	let g:syntastic_enable_baloons=1
	let g:syntastic_quiet_warnings=0
	let g:syntastic_error_symbol='✕'
	let g:syntastic_style_error_symbol='△'
	let g:syntastic_warning_symbol='✠'
	let g:syntastic_style_warning_symbol='≈'
endfunction

" Tabularize
let bundle=neobundle#get('tabular')
function! bundle.hooks.on_source(bundle)
	map ta :Tabularize
endfunction

" UltiSnips
let bundle=neobundle#get('ultisnips')
function! bundle.hooks.on_source(bundle)
	let g:UltiSnipsEditSplit='vertical'
	let g:UltiSnipsSnippetDirectories=['snippets']
	let g:UltiSnipsExpandTrigger='<c-h>'
	let g:UltiSnipsJumpForwardTrigger='<c-n>'
	let g:UltiSnipsJumpBackwardTrigger='<c-p>'
endfunction

" Unimpaired
let bundle=neobundle#get('unimpaired')
function! bundle.hooks.on_source(bundle)
	nmap mk [e
	nmap mj ]e
	vmap mk [egv
	vmap mj ]egv
endfunction

" Unite
let bundle=neobundle#get('unite')
function! bundle.hooks.on_source(bundle)
	let g:unite_prompt='» '
	let g:unite_source_history_yank_enable=1
	let g:unite_data_directory=expand('~/.vim/cache')
	let g:unite_source_session_default_session_name='default'
	let g:unite_source_session_path=expand('~/.vim/sessions')
	let g:unite_source_rec_max_cache_files=5000
	let g:unite_split_rule='botright'
	let g:unite_force_overwrite_statusline=0
	let g:unite_winheight=20
	call unite#filters#matcher_default#use(['matcher_fuzzy'])
	call unite#filters#sorter_default#use(['sorter_rank'])

	nmap <leader>f :Unite -buffer-name=files    -start-insert file_rec<cr>
	nmap <leader>b :Unite -buffer-name=buffers  -start-insert buffer<cr>
	nmap <leader>j :Unite -buffer-name=jump -no-split jump<cr>
	nmap <leader>y :Unite -buffer-name=yank history/yank<cr>
endfunction

let bundle=neobundle#get('unite-outline')
function! bundle.hooks.on_source(bundle)
	nmap <leader>o :Unite -buffer-name=outline -no-split -start-insert outline<cr>
endfunction

let bundle=neobundle#get('unite-session')
function! bundle.hooks.on_source(bundle)
	nmap <leader>s :Unite -buffer-name=sessions -start-insert session<cr>
	command -nargs=? LoadSession UniteSessionLoad <args>
	command -nargs=? SaveSession UniteSessionSave <args>
endfunction

function! UniteBufferSettings()
	nmap <buffer> <c-c> <Plug>(unite_exit)
	imap <buffer> <c-c> <Plug>(unite_exit)

	imap <buffer> <tab>   <Plug>(unite_select_next_line)
	imap <buffer> <s-tab> <Plug>(unite_select_previous_line)

	imap <buffer><expr> <c-s> unite#do_action('split')
	imap <buffer><expr> <c-v> unite#do_action('vsplit')
	imap <buffer><expr> <c-t> unite#do_action('tabopen')
endfunction

if has('autocmd')
	augroup ApplyUniteBufferSettings
		autocmd!
		autocmd FileType unite call UniteBufferSettings()
	augroup END
endif

" YouCompleteMe
let bundle=neobundle#get('YouCompleteMe')
function! bundle.hooks.on_source(bundle)
	let g:ycm_global_ycm_extra_conf=expand('~/.vim/ycm/ycm_extra_conf.py')
	let g:ycm_confirm_extra_conf=1
	let g:ycm_cache_omnifunc=1
	let g:ycm_collect_identifiers_from_tags_files=1
	let g:ycm_seed_identifiers_with_syntax=1
	let g:ycm_key_list_select_completion=['<tab>']
	let g:ycm_key_list_previous_completion=['<s-tab>']
	let g:ycm_extra_conf_c_flags='-xc -std=c11 -Wall -Wextra -Iinc -Iinclude'
	let g:ycm_extra_conf_cpp_flags='-xc++ -std=c++11 -Wall -Wextra -Iinc -Iinclude'
	let g:ycm_extra_conf_vim_data=[
				\   '&filetype',
				\   'g:ycm_extra_conf_c_flags',
				\   'g:ycm_extra_conf_cpp_flags'
				\]
endfunction

" --------
" Mappings
" --------
map  <left>  <nop>
map  <right> <nop>
map  <up>    <nop>
map  <down>  <nop>
cmap <left>  <nop>
cmap <right> <nop>
cmap <up>    <nop>
cmap <down>  <nop>
imap <left>  <nop>
imap <right> <nop>
imap <up>    <nop>
imap <down>  <nop>

" treat line wraps as real lines
nmap j gj
nmap k gk

" indent and un-indent
vmap > >gv
vmap < <gv

" visually select last edited/pasted text
nmap gV `[v`]

" Set tab width using a nice prompt
function! SetTab()
	let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
	if l:tabstop > 0
		let &l:tw = l:tabstop
		let &l:sts = l:tabstop
		let &l:sw = l:tabstop
	endif
	let l:et = input('set expandtab = ')
	if l:et == 'no'
		setlocal noexpandtab
	else
		setlocal expandtab
	end
	echo
	echo "\r"
	call SummarizeTabs()
endfunction

" Summarize current tab info
function! SummarizeTabs()
	try
		echoh ModeMsg
		echon 'tabstop=' &l:ts ' softtabstop=' &l:sts ' shiftwidth=' &l:sw ' '
		if &l:et
			echon 'expandtab'
		else
			echon 'noexpandtab'
		endif
	finally
		echoh None
	endtry
endfunction

command -nargs=0 Stab call SetTab()

if has('gui_running')
	" Toggle menu
	nmap <f1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<cr>
endif

NeoBundleCheck
call neobundle#call_hook('on_source')
