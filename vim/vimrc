" -----
" Setup
" -----
scriptencoding utf-8

if has('win32')
	let g:vimfiles_path = expand('~\vimfiles')
else
	let g:vimfiles_path = expand('~/.vim')
endif

let g:plug_window='vertical new'

call plug#begin(util#path_join(g:vimfiles_path, 'plugins'))

" appearance
Plug 'chriskempson/base16-vim'
Plug 'kernan/vim-modestatus'

" vcs integration
Plug 'mhinz/vim-signify'

" languages
Plug 'sheerun/vim-polyglot'

" unite
function! BuildVimproc(info)
	if has('win32')
		execute '!tools\\update-dll-mingw'
	else
		execute '!make'
	endif
endfunction

Plug 'shougo/vimproc.vim', {'do': function('BuildVimproc')}
Plug 'shougo/unite.vim'
Plug 'shougo/unite-outline'

" completion/errors
function! BuildYCM(info)
	let flags = ''
	echohl Question
	let flags .= input('C-Family language support? (y/n)') == "y" ? ' --clang-completer' : ''
	let flags .= input('Use system libclang? (y/n)') == "y" ? ' --system-libclang' : ''
	let flags .= input('C# support? (y/n)') == "y" ? ' --omnisharp-completer' : ''
	let flags .= input('Go support? (y/n)') == "y" ? ' --gocode-completer' : ''
	let flags .= input('Javascript support? (y/n)') == "y" ? ' --tern-completer' : ''
	let flags .= input('Rust support? (y/n)') == "y" ? ' --racer-completer' : ''
	echohl None

	let install = './install.py'
	if has('win32')
		echohl Question
		let msvc_ver = input('MSVC Version? Supports 11 (Visual Studio 2012), 12 (2013),  and 14 (2015). ')
		echohl None
		execute '!install.py --msvc ' . msvc_ver . flags
	else
		execute '!./install.py' . flags
	endif
endfunction

Plug 'valloric/youcompleteme', {'do': function('BuildYCM')}
Plug 'scrooloose/syntastic'

" other
Plug 'junegunn/vim-easy-align', {'on': ['<Plug>EasyAlign', 'EasyAlign']}
Plug 'junegunn/vader.vim', {'on': 'Vader', 'for': 'vader'}
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-user'
Plug 'mbbill/undotree', {'on': ['UndotreeShow', 'UndotreeHide', 'UndotreeToggle']}
Plug 'raimondi/delimitmate'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

call plug#end()

" --------
" Settings
" --------

" clear autocmd
if has('autocmd')
	augroup vimrc
		autocmd!
	augroup END
endif

let mapleader = "\\"
map <space> <leader>

if has('autocmd')
	filetype plugin indent on
endif

if has('syntax')
	syntax enable
endif

set ttimeout
set ttimeoutlen=100

set backspace=indent,eol,start

set autoindent
set smarttab

set smartcase
set incsearch
set hlsearch

if has('multi_byte')
	set encoding=utf-8
endif

if has('multi_byte')
	set listchars=eol:¬,tab:»\ ,trail:·
else
	set listchars=eol:$,tab:>\ ,trail:-
endif

if has('unnamedplus')
	set clipboard=unnamedplus,unnamed
else
	set clipboard+=unnamed
endif

if has('persistent_undo')
	set undofile
	let g:undodir = util#path_join(g:vimfiles_path, 'undo')
	call util#mkdir_if_none(g:undodir)
	let &undodir=g:undodir
endif

let g:backupdir = util#path_join(g:vimfiles_path, 'backup//')
call util#mkdir_if_none(g:backupdir)
let &backupdir=g:backupdir

let g:swapdir = util#path_join(g:vimfiles_path, 'swap//')
call util#mkdir_if_none(g:swapdir)
let &directory=g:swapdir

set completeopt=menu,menuone,noselect

set wildmenu
set wildmode=longest:full,full
set wildignore+=.hg,.git,.svn                    " version control files
set wildignore+=*.aux,*.out,*.toc                " LaTeX build files
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.class                          " java compiled objects
set wildignore+=*.luac                           " lua byte code
set wildignore+=*.pyc                            " python byte code
set wildignore+=*.sw                             " vim swap files
set wildignore+=*.DS_Store                       " OSX something

set nrformats-=octal
set formatoptions+=j
set fileformats+=mac

set number
set relativenumber

set scrolloff=1
set sidescrolloff=5

if has('mouse')
	set mouse=a
endif

set display+=lastline
set laststatus=2
set noshowmode

set autoread
set hidden
set cursorline
set shortmess=atI
set lazyredraw
set splitbelow
set splitright
set belloff=all

if has('autocmd')
	augroup vimrc
		" automatically resize splits on window resize
		autocmd VimResized * :wincmd =
		" redraw immediately when entering vim
		autocmd VimEnter * redraw!
		" restore line position
		autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
		" switch to/from relative line numbers
		autocmd BufEnter,FocusGained * setlocal number relativenumber
		autocmd BufLeave,FocusLost   * setlocal number norelativenumber
		autocmd InsertEnter * setlocal number norelativenumber
		autocmd InsertLeave * setlocal number relativenumber
		" enable/disable cursor line depending on window focus
		autocmd BufEnter,FocusGained * setlocal number cursorline
		autocmd BufLeave,FocusLost   * setlocal number nocursorline
		" use syntaxcomplete#Complete when no other completers are set
		if exists('+omnifunc')
			autocmd FileType *
				\ if &omnifunc == '' |
				\   setlocal omnifunc=syntaxcomplete#Complete |
				\ endif
		endif
		" always show the sign column
		autocmd BufEnter * sign define dummy
		autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')
	augroup END
endif

" -----
" Theme
" -----
let g:base16colorspace = 256
set background=dark
colorscheme base16-monokai

"
" Modestatus
"
hi StatusLine           guifg=#a59f85 guibg=#49483e gui=none ctermfg=20     ctermbg=19  cterm=none
hi StatusLineNC         guifg=#75715e guibg=#383830 gui=none ctermfg=08     ctermbg=18  cterm=none
hi ModestatusMode       guifg=Yellow  guibg=#49483e gui=bold ctermfg=Yellow ctermbg=19  cterm=bold
hi ModestatusFilename   guifg=#a59f85 guibg=#49483e gui=bold ctermfg=20     ctermbg=19  cterm=bold
hi ModestatusModified   guifg=Red     guibg=#49483e gui=bold ctermfg=Red    ctermbg=19  cterm=bold
hi ModestatusModifiedNC guifg=Red     guibg=#383830 gui=bold ctermfg=Red    ctermbg=18  cterm=bold
hi ModestatusReadonly   guifg=Red     guibg=#49483e gui=none ctermfg=Red    ctermbg=19  cterm=none
hi ModestatusReadonlyNC guifg=Red     guibg=#383830 gui=none ctermfg=Red    ctermbg=18  cterm=none
hi link ModestatusPaste ModestatusReadonly
hi ModestatusError      guifg=White   guibg=#af0000 gui=none ctermfg=White  ctermbg=124 cterm=none
hi ModestatusWarning    guifg=Black   guibg=#dfaf00 gui=none ctermfg=Black  ctermbg=178 cterm=none

call modestatus#extensions#enable('core')
call modestatus#extensions#enable('loclist')
call modestatus#extensions#enable('signify')

let g:modestatus#disable_filetypes = ['unite', 'qf', 'undotree']
let g:modestatus#statusline = {'active': {'left': [
	\         'line_percent',
	\         'position',
	\         'mode',
	\         'filename',
	\         'modified',
	\         'signify_hunks',
	\         'readonly',
	\         'paste',
	\         'filetype',
	\         'encoding',
	\         'fileformat',
	\         'loclist_errors',
	\         'loclist_warnings'], 'right': []},
	\ 'inactive': {'left': [
	\         'filename',
	\         'modified',
	\         'signify_hunks',
	\         'readonly',
	\         'filetype',
	\         'encoding',
	\         'fileformat',
	\         'loclist_errors',
	\         'loclist_warnings'], 'right': []}}

call modestatus#options#add('line_percent', {'common': {'min_winwidth': 30}})
call modestatus#options#add('position', {'common': {'min_winwidth': 30}})
call modestatus#options#add('filename', {'active': {'color': 'ModestatusFilename'}})
call modestatus#options#add('mode', {'active': {'color': 'ModestatusMode', 'format': (has('multi_byte') ? "\u2039%s\u203A" : '<%s>')}})
call modestatus#options#add('modified', {'active': {'color': 'ModestatusModified'}, 'inactive': {'color': 'ModestatusModifiedNC'}})
call modestatus#options#add('signify_hunks', {'common': {'format': '(%s)'}})
call modestatus#options#add('readonly', {'active': {'color': 'ModestatusReadonly'}, 'inactive': {'color': 'ModestatusReadonlyNC'}})
call modestatus#options#add('paste', {'active': {'color': 'ModestatusPaste'}})
call modestatus#options#add('filetype', {'common': {'format': '[%s]', 'min_winwidth': 50}})
call modestatus#options#add('encoding', {'common': {'format': '[%s:', 'separator': '', 'min_winwidth': 70}})
call modestatus#options#add('fileformat', {'common': {'format': '%s]', 'min_winwidth': 70}})
call modestatus#options#add('loclist_errors', {'common': {'separator': '', 'color': 'ModestatusError', 'format': ' %s '}})
call modestatus#options#add('loclist_warnings', {'common': {'separator': '', 'color': 'ModestatusWarning', 'format': ' %s '}})

" ---------
" Languages
" ---------

"
" C++
"
let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 0

"
" Go
"
let g:go_fmt_command = 'goimports'

" -------
" Plugins
" -------

"
" DelimitMate
"
let delimitMate_matchpairs = "(:),[:],{:}"
let delimitMate_quotes = "\" ' `"
let delimitMate_expand_cr = 1
let delimitMate_jump_expansion = 1

if has('autocmd')
	augroup vimrc
		" filetype specific pairs
		" filetype specific quotes
		autocmd FileType vim let b:delimitMate_quotes = "'"
		" filetype specific nesting
		autocmd FileType python let b:delimitMate_nesting_quotes = ['"']
	augroup END
endif

"
" ListToggle
"
let g:lt_location_list_toggle_map = '<leader>l'
let g:lt_quickfix_list_toggle_map = '<leader>q'
let g:lt_height = 10

"
" Signify
"
let g:signify_disable_by_default = 0
let g:signify_sign_overwrite = 0
let g:signify_sign_add = '+'
let g:signify_sign_change = '~'
let g:signify_sign_delete = '-'
let g:signify_sign_delete_first_line = '^'

"
" Syntastic
"
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
hi link SyntasticErrorSign ModestatusError
hi link SyntasticWarningSign ModestatusWarning

"
" UndoTree
"
let g:undotree_WindowLayout = 2
let g:undotree_SplitWidth = 40
let g:undotree_DiffpanelHeight = 15
let g:undotree_DiffAutoOpen = 0
let g:undotree_HighlightChangedText = 0
command! -nargs=0 UndoTree silent UndotreeToggle

"
" UltiSnips
"
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsExpandTrigger = '<c-j>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'

"
" Unite
"
hi link uniteStatusNormal  StatusLine
hi link uniteStatusMessage StatusLine
hi link uniteStatusLineNR  StatusLine
hi uniteStatusHead             guifg=#f92672 guibg=#49483e gui=bold ctermfg=1  ctermbg=19 cterm=bold
hi uniteStatusSourceNames      guifg=#f4bf75 guibg=#49483e gui=none ctermfg=3  ctermbg=19 cterm=none
hi uniteStatusSourceCandidates guifg=#fd971f guibg=#49483e gui=none ctermfg=16 ctermbg=19 cterm=none

let g:unite_data_directory = util#path_join(g:vimfiles_path, 'cache')
call util#mkdir_if_none(g:unite_data_directory)

call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])

call unite#custom#profile('default', 'context', {'prompt': (has('multi_byte') ?  "\u00BB " : '>> '), 
			\ 'silent': 1, 'direction': 'botright', 'prompt_direction': 'top'})
call unite#custom#profile('files', 'context', {'start_insert': 1})
call unite#custom#profile('buffers', 'context', {'start_insert': 1})
call unite#custom#profile('search', 'context', {'no_quit': 2})

nnoremap <leader>f :Unite -buffer-name=files file_rec<cr>
nnoremap <leader>b :Unite -profile-name=files -buffer-name=buffers buffer<cr>
nnoremap <leader>/ :Unite -buffer-name=search grep<cr>

"
" Unite Outline
"
call unite#custom#profile('outline', 'context', {'no_split': 1})
nnoremap <leader>o :Unite -buffer-name=outline outline<cr>

"
" YouCompleteMe
"
let g:ycm_open_loclist_on_ycm_diags = 0
" general c-family language config
let g:ycm_global_ycm_extra_conf = util#path_join(g:vimfiles_path, 'ycm/ycm_extra_conf.py')
let g:ycm_extra_conf_c_flags    = '-std=c11 -Wall -Wextra -pedantic'
let g:ycm_extra_conf_cpp_flags  = '-std=c++11 -Wall -Wextra -pedantic'
let g:ycm_extra_conf_objc_flags = '-Wall -Wextra -pedantic'
let g:ycm_extra_conf_vim_data = ['&filetype', 'g:ycm_extra_conf_c_flags', 'g:ycm_extra_conf_cpp_flags']

" --------
" Mappings
" --------
noremap  <left>  <nop>
noremap  <right> <nop>
noremap  <up>    <nop>
noremap  <down>  <nop>
cnoremap <left>  <nop>
cnoremap <right> <nop>
cnoremap <up>    <nop>
cnoremap <down>  <nop>
inoremap <left>  <nop>
inoremap <right> <nop>
inoremap <up>    <nop>
inoremap <down>  <nop>

" yank to end of line
nnoremap Y y$

" treat line wraps as real lines
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" indent and un-indent
vnoremap > >gv
vnoremap < <gv

" visually select last edited/pasted text
nnoremap gV `[v`]

" automatically jump to the end of the last paste
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" sudo write file
cmap w!! w !sudo tee > /dev/null %

" Visual mode search
function! s:VSetSearch()
	let temp = @@
	norm! gvy
	let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
	call histadd('/', substitute(@/, '[?/]', '\="\\%d".char2nr(submatch(0))', 'g'))
	let @@ = temp
endfunction

vnoremap * :<C-u>call <SID>VSetSearch()<CR>/<CR>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>?<CR>

" Set tab width using a nice prompt
function! s:set_tabs()
	echohl Question
	let l:tabstop = 1 * input('setlocal tabstop = softtabstop = shiftwidth = ')
	let l:et = input('setlocal expandtab = (y/n)')
	echohl None
	if l:tabstop > 0
		let &l:ts = l:tabstop
		let &l:sts = l:tabstop
		let &l:sw = l:tabstop
	endif
	if l:et == "y"
		setlocal expandtab
	else
		setlocal noexpandtab
	end
	echo
	echo "\r"
	call s:summarize_tabs()
endfunction

" Summarize current tab info
function! s:summarize_tabs()
	try
		echomsg 'tabstop=' . &l:ts . ' softtabstop=' . &l:sts . ' shiftwidth=' . &l:sw . ' ' . ((&l:et) ? 'expandtab' : 'noexpandtab')
	endtry
endfunction

command! -nargs=0 SetTabs call s:set_tabs()
command! -nargs=0 SummarizeTabs call s:summarize_tabs()
