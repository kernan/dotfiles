" Behavior ------------------------------------------------------------------{{{
" disable compatability mode
set nocompatible
" set history size
set history=1000
set undoreload=1000
" temporary files
set undodir=$HOME/.vimundo//
set backupdir=$HOME/.vimbak//
set directory=$HOME/.vimswap//
if !isdirectory(expand(&undodir))
	call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
	call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
	call mkdir(expand(&directory))
endif
" enable undo and backup files
set undofile
set backup
" disable swap files
set noswapfile
" crontab fix for backup
set backupskip=/tmp/*,/private/tmp/*"
" use tilde (caps) as operator
set tildeop
" enable alt keys in mappings
set winaltkeys=no
" automatically read file changes
set autoread
" set encoding
set encoding=utf8
set fileformats=unix,dos,mac
" enable filetype specific settings
filetype plugin on
filetype indent on
" default backspace behavior
set backspace=indent,eol,start
" set shell
set shell=/bin/zsh\ --login
" enable mouse
set mouse=a
" set leader
let mapleader="\\"
let g:mapleader="\\"
" disable annoying helpscreen mappings
noremap  <F1> <nop>
inoremap <F1> <nop>
" toggle menu
if has('gui_running')
	" toggle menu
	nnoremap <f1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<cr>
endif
" toggle paste mode
nnoremap <f2> :set paste!<cr>
" super user write
cnoremap suw :w !sudo tee % > /dev/null
" source current selection
vnoremap <leader>S y:execute @@<cr>:echo "sourced selection"<cr>
nnoremap <leader>S ^vg_y:execute @@<cr>:echo "sourced line"<cr>
" timeout length
set ttimeoutlen=1000
set timeoutlen=1000
" if has("autocmd")
" 	augroup FastEscape
" 		autocmd!
" 		autocmd InsertEnter * set timeoutlen=0
" 		autocmd InsertLeave * set timeoutlen=1000
" 	augroup END
" endif
" }}}

" UI ------------------------------------------------------------------------{{{
" disable error bells
set noerrorbells
set novisualbell
set t_vb=
set tm=500
" show screen title
set title
" set text display options
set shortmess =a " use all abbreviations
set shortmess+=t " truncate file message if too long
set shortmess+=s " remove 'search hit TOP/BOTTOM' message
set shortmess+=o " file-read message overwrites file-written message
set shortmess+=O " file-read message overwrites any message
set shortmess+=I " remove intro message
" show current mode
set showmode
" show partial commands
set showcmd
" automatically hide buffers
set hidden
" smooth terminal redrawing
set ttyfast
" don't redraw in macros
set lazyredraw
" enable line position
set ruler
" line numbers
set number
set norelativenumber
" always show statusline
set laststatus=2
" set invisible characters
set listchars=tab:▸\ ,eol:¬,extends:»,precedes:«
set showbreak=…
set list
set synmaxcol=800
" completion
set complete=.,w,b,u,t
set completeopt=longest,menuone
" line completion
inoremap <c-l> <c-x><c-l>
" filename completion
inoremap <c-f> <c-x><c-f>
" resize splits when window is resized
if has("autocmd")
	augroup ResizeSplits
		autocmd!
		autocmd VimResized * :wincmd =
	augroup END
endif
" show current cursorline
set cursorline
" gvim appearance
if has('gui_running')
	set guioptions-=T " remove toolbar
	set guioptions-=m " remove menu
	set guioptions+=g " grey menu items
	set guioptions-=c " hide intro
	set guioptions-=i " hide scrollbars
	set guioptions-=r " hide scrollbars
	set guioptions-=L " hide scrollbars
	set guioptions-=l " hide scrollbars
	set guifont=Meslo\ LG\ S\ for\ Powerline\ 8
endif
" toggle invisibles
nnoremap <leader>l :setlocal list!<cr>
" toggle line numbers
nnoremap <leader>nn :setlocal number!<cr>
nnoremap <leader>nr :setlocal relativenumber!<cr>
" }}}

" Wildmenu ------------------------------------------------------------------{{{
" enable wildmenu
set wildmenu
set wildmode=longest:full,full
" things to ignore
set wildignore+=.hg,.git,.svn                    " version control files
set wildignore+=*.aux,*.out,*.toc                " LaTeX build files
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.class                          " java compiled objects
set wildignore+=*.luac                           " lua byte code
set wildignore+=*.pyc                            " python byte code
set wildignore+=*.sw                             " vim swap files
set wildignore+=*.DS_Store                       " OSX something
" }}}

" Folding -------------------------------------------------------------------{{{
" function: fold display text {{{
set foldtext=Custom_foldtext()
function! Custom_foldtext()
	let line = getline(v:foldstart)
	let nucolwidth = &fdc + &number * &numberwidth
	let windowwidth = winwidth(0) - nucolwidth - 2
	let foldedlinecount = v:foldend - v:foldstart
	let onetab = strpart('          ', 0, &tabstop)
	let line = substitute(line, '\t', onetab, 'g')
	let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
	let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
	return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . ' '	
endfunction " }}}
" function: toggle fold method {{{
let g:FoldMethod=0
function! ToggleFold()
	if g:FoldMethod == 0
		exe 'setlocal foldmethod=indent'
		let g:FoldMethod=1
	else
		exe 'setlocal foldmethod=marker'
		let g:FoldMethod=0
	endif
endfunction " }}}
" default fold method
set foldmethod=marker
set foldmarker={{{,}}}
set foldlevelstart=0
set foldnestmax=30
set foldminlines=1
" toggle between indent and marker folding
noremap <leader>ft :call ToggleFold()<cr>
" focus fold
nnoremap <leader>z zMzvzz
" }}}

" Tabs and Whitespace -------------------------------------------------------{{{
" function: set tab width {{{
command! -nargs=* Stab call Stab()
function! Stab()
	let l:tabstop = 1 * input("set tabstop = softtabstop = shiftwidth = ")
	if l:tabstop > 0
		let &l:tw = l:tabstop
		let &l:sts = l:tabstop
		let &l:sw = l:tabstop
	endif
	echo
	echo "\n"
	call SummarizeTabs()
endfunction
" }}}
" function: summarize tab info {{{
function! SummarizeTabs()
	try
		echoh ModeMsg
		echon "tabstop=" &l:ts " softtabstop=" &l:sts " shiftwidth=" &l:sw ' '
		if &l:et
			echon "expandtab"
		else
			echon "noexpandtab"
		endif
	finally
		echoh None
	endtry
endfunction
" }}}
" tabwidth
set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab
" formatting
set wrap
set textwidth=80
set formatoptions =c " auto-wrap comments using textwidth
set formatoptions+=q " allow comment formatting using 'gq'
set formatoptions+=r " automatically insert comment leader on <Enter>
set formatoptions+=n " format numbered lists
set formatoptions+=j " remove comment leaders (where it makes sense)
" auto indentation
set autoindent
set smartindent
set shiftround
" increase/decrease indent
vnoremap >> >gv
vnoremap << <gv
" }}}

" Color Scheme --------------------------------------------------------------{{{
syntax on
colorscheme molokai
" }}}

" Searching  and Selection --------------------------------------------------{{{
" regex magic
set magic
" smart ignore case
set smartcase
" incremental search (modern)
set incsearch
" highlight previous searches
set hlsearch
" show bracket matches
set showmatch
set matchtime=2
" substitude all matches on a line
set gdefault
" clear search buffer
nnoremap <leader>, :nohlsearch<cr>call clearmatches()<cr>
" easier system paste
noremap <leader>y "*y
noremap <leader>p :set paste<cr>:put *<cr>:set nopaste<cr>
" }}}

" Movement ------------------------------------------------------------------{{{
set scrolloff=3
" normal mode
" visual mode
" insert mode
inoremap <c-a> <home>
inoremap <c-e> <end>
" inoremap <c-h> <left>
" inoremap <c-j> <down>
" inoremap <c-k> <up>
" inoremap <c-l> <right>
" command mode
cnoremap <c-a> <home>
cnoremap <c-e> <end>
cnoremap <c-h> <left>
cnoremap <c-l> <right>
" bubble lines
nnoremap <c-j> :move +1<cr>
nnoremap <c-k> :move -2<cr>
vnoremap <c-j> :move '>+<cr>gv
vnoremap <c-k> :move -2<cr>gv
" }}}

" Filetype Specific ---------------------------------------------------------{{{
if has("autocmd")
	augroup FileTypeSpecific
		autocmd!
		" Tabs
		autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
		autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
		" Trailing Whitespace
		" TODO Set up filetype specific trailing whitespace rules.
		" Formatting
		" TODO Set up filetype specific formatting options.
		" Syntax
		autocmd BufNewFile,BufRead *.frag,*.vert,*.fp,*.vp,*.glsl setfiletype glsl
	augroup END
endif
" }}}

" Plugins -------------------------------------------------------------------{{{
" pathogen
set runtimepath+=$HOME/.vim/pathogen
call pathogen#infect()
" command-t
let g:CommandTMaxFile=10000
let g:CommandTMaxDepth=30
let g:CommandTScanDotDirectories=1
let g:CommandTMaxCachedDirectories=0
let g:CommandTMatchWindowReverse=1
if has("autocmd")
	augroup CommandTAutoFlush
		autocmd!
		autocmd FocusGained * CommandTFlush
		autocmd BufWritePost * CommandTFlush
		autocmd ShellCmdPost * CommandTFlush
	augroup END
endif
" delimitmate
let g:delimitMate_autoclose=1
let g:delimitMate_matchpairs="(:),[:],{:},<:>"
let g:delimitMate_smart_matchpairs=1
let g:delimitMate_balance_matchpairs=1
let g:delimitMate_quotes="\" '"
let g:delimitMate_smart_quotes=1
let g:delimitMate_expand_cr=1
let g:delimitMate_expand_space=1
let g:delimitMate_excluded_regions="Comment,String"
" snipmate
let g:snippets_dir="$HOME/.vim/snippets"
" tagbar
map <f3> :TagbarToggle<cr>
let g:tagbar_compact=1
let g:tagbar_indent=1
let g:tagbar_width=31
let g:tagbar_sort=1
let g:tagbar_singleclick=1
" gundo
map <f4> :GundoToggle<cr>
let g:gundo_width=31
let g:gundo_preview_height=15
let g:gundo_right=0
let g:gundo_preview_bottom=1
let g:gundo_help=0
let g:gundo_close_on_revert=1
let g:gundo_preview_statusline="Undo Diff"
let g:gundo_tree_statusline="Undo Tree"
" syntastic
let g:syntastic_auto_loc_list=1
let g:syntastic_loc_list_height=5
let g:syntastic_check_on_open=1
let g:syntastic_echo_current_error=0
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=0
let g:syntastic_error_symbol='>>'
let g:syntastic_warning_symbol='>>'
let g:syntastic_enable_highlighting=0
let g:syntastic_stl_format="%B{[%E{Err: (%e) %fe}%B{, }%W{Warn: (%w) %fw}]}"
map <leader>e :Errors<cr>
" supertab
let g:SuperTabDefaultCompletiontype='context'
let g:SuperTabLongestHighlight=1
let g:SuperTabMappingForward='<s-tab>'
let g:SuperTabMappingBackward='<s-c-tab>'
" powerline
set noshowmode
set runtimepath+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim
" }}}
