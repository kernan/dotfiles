" Pathogen
runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

" --------
" Settings
" --------
set nocompatible

let mapleader="\\"
let g:mapleader="\\"

set history=1000
set undoreload=1000
set backupdir=$HOME/.vimbak//
set undodir=$HOME/.vimundo//
set directory=$HOME/.vimswap//
set undofile   " enable undo files
set backup     " enable backup files
set noswapfile " disable swap files
set pastetoggle=<F2>
set mouse=a " enable all mouse modes
set clipboard=unnamed " use system clipboard by default
set backspace=2
set autoread " automatically read file changes
set hidden " automatically manage hidden buffers
set ttimeoutlen=100
set timeoutlen=3000
set noesckeys " automatically recognize esc in insert mode
set noerrorbells
set novisualbell
set t_vb=
set shortmess =a " use all abbreviations
set shortmess+=t " truncate file message if too long
set shortmess+=s " remove 'search hit TOP/BOTTOM' message
set shortmess+=o " file-read message overwrites file-written message
set shortmess+=O " file-read message overwrites any message
set shortmess+=I " remove intro message
set showcmd " show partial command on the last line
set ttyfast " smoother redraw with multiple windows
set lazyredraw " disable screen draw during macros
set t_ut= " clear background, fixes background in tmux
set number " show line numbers
set norelativenumber " don't use relative numbers
set laststatus=2 " always show the status bar
set listchars=tab:▸\ ,eol:¬,extends:»,precedes:«
set showbreak=…
set list " show hidden characters
set synmaxcol=800 " max column for syntax highlighting
set completeopt=menu,menuone,longest
set cursorline " highlight the current cursor line
set wildmenu " enable wildmenu
set wildmode=longest:full,full
set wildignore+=.hg,.git,.svn                    " version control files
set wildignore+=*.aux,*.out,*.toc                " LaTeX build files
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.class                          " java compiled objects
set wildignore+=*.luac                           " lua byte code
set wildignore+=*.pyc                            " python byte code
set wildignore+=*.sw                             " vim swap files
set wildignore+=*.DS_Store                       " OSX something
set tabstop=4     " number of spaces a tab appears as
set shiftwidth=4  " number of spaces to use for each step of (auto)indent
set softtabstop=4 " number of spaces a tab counts for while editing
set noexpandtab   " do not expand tabs to spaces
set wrap         " wrap displayed text
set textwidth=80 " wrap to 80 columns
set formatoptions =c " auto-wrap comments using textwidth
set formatoptions+=q " allow comment formatting using 'gq'
set formatoptions+=r " automatically insert comment leader on <Enter>
set formatoptions+=n " format numbered lists
set formatoptions+=j " remove comment leaders (where it makes sense)
set autoindent  " copy indentation from previous line when starting a new one
set smartindent " smart indent new lines
set shiftround  " round indent to multiple of shiftwidth
set cinoptions+=L-1 " indent of labels -> none
set cinoptions+=:0  " indent of cases -> none
set cinoptions+=l1  " indent of block after case -> align with case statement
set cinoptions+=g0  " indent of scope declarations -> none
set cinoptions+=N-s " indent of statements inside namespace -> none
set cinoptions+=(0  " indent of line continuations with unclosed parens -> line up with open-paren
set cinoptions+=j1  " indent Java anonymous classes correctly
set magic      " use special characters in search patterns
set ignorecase " ignore case of search term
set smartcase  " stop ignoring case when search pattern includes upper-case characters
set incsearch  " show matches as the command is being type
set hlsearch   " highlight all search results
set gdefault   " substitute all matches on a line by default
set scrolloff=5
if has('gui_running')
	set guioptions-=T " remove toolbar
	set guioptions-=m " remove menu
	set guioptions+=g " grey menu items
	set guioptions-=c " hide intro
	set guioptions-=i " hide scrollbars
	set guioptions-=r " hide scrollbars
	set guioptions-=L " hide scrollbars
	set guioptions-=l " hide scrollbars
	set guifont=Meslo\ LG\ S\ for\ Powerline\ 8
endif

set omnifunc=syntaxcomplete#Complete

syntax on
let g:rehash256=1
colorscheme molokai

" -------
" Plugins
" -------
" Powerline
set noshowmode
set runtimepath+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim

" ctrlp
let g:ctrlp_map='<leader>t'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip    " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe " Windows

" DelimitMate
let g:delimitMate_autoclose=1
" TODO Determine match pairs based on filetype.
" let g:delimitMate_matchpairs="(:),[:],{:},<:>"
let g:delimitMate_matchpairs="(:),[:],{:}"
let g:delimitMate_smart_matchpairs=1
let g:delimitMate_balance_matchpairs=1
" TODO Determine quote pairs base on filetype.
let g:delimitMate_quotes="\" '"
let g:delimitMate_smart_quotes=1
let g:delimitMate_expand_cr=1
let g:delimitMate_expand_space=1
let g:delimitMate_excluded_regions="Comment"

" DoxyGen
let g:load_doxygen_syntax=0

" Syntastic
let g:syntastic_auto_loc_list=1
let g:syntastic_loc_list_height=5
let g:syntastic_check_on_open=1
let g:syntastic_echo_current_error=0
let g:syntastic_enable_signs=1
let g:syntastic_enable_highlighting=0
let g:syntastic_quiet_warnings=0
let g:syntastic_error_symbol='>>'
let g:syntastic_style_error_symbol='S>'
let g:syntastic_warning_symbol='>>'
let g:syntastic_style_warning_symbol='S>'
" C
let g:syntastic_c_compiler='clang'
let g:syntastic_c_check_header=1
let g:syntastic_c_no_default_include_dirs=1
let g:syntastic_c_auto_refresh_includes=1
let g:syntastic_c_compiler_options=' -std=c11'
let g:syntastic_c_include_dirs=[ 'inc', 'include' ]
" C++
let g:syntastic_cpp_compiler='clang++'
let g:syntastic_cpp_check_header=1
let g:syntastic_cpp_no_default_include_dirs=1
let g:syntastic_cpp_auto_refresh_includes=1
let g:syntastic_cpp_compiler_options=' -std=c++11'
let g:syntastic_cpp_include_dirs=[ 'inc', 'include' ]

" ---------
" Functions
" ---------
" Set tab width using a nice prompt
function! SetTab()
	let l:tabstop = 1 * input("set tabstop = softtabstop = shiftwidth = ")
	if l:tabstop > 0
		let &l:tw = l:tabstop
		let &l:sts = l:tabstop
		let &l:sw = l:tabstop
	endif
	let l:et = input("set expandtab = ")
	if l:et == "no"
		setlocal noexpandtab
	else
		setlocal expandtab
	end
	echo
	echo "\n"
	call SummarizeTabs()
endfunction

" Summarize current tab info
function! SummarizeTabs()
	try
		echoh ModeMsg
		echon "tabstop=" &l:ts " softtabstop=" &l:sts " shiftwidth=" &l:sw ' '
		if &l:et
			echon "expandtab"
		else
			echon "noexpandtab"
		endif
	finally
		echoh None
	endtry
endfunction

" --------
" Mappings
" --------
cnoremap <c-h> <left>
cnoremap <c-l> <right>
nnoremap <c-j> :move +1<cr>
nnoremap <c-k> :move -2<cr>
vnoremap <c-j> :move '>+<cr>gv
vnoremap <c-k> :move -2<cr>gv
nnoremap <leader>, :nohlsearch<cr>call clearmatches()<cr>
vnoremap >> >gv
vnoremap << <gv
nnoremap <leader>l :setlocal list!<cr>
nnoremap <leader>nn :setlocal number!<cr>
nnoremap <leader>nr :setlocal relativenumber!<cr>

if has('gui_running')
	" Toggle menu
	nnoremap <f1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<cr>
endif

" --------
" Commands
" --------
command! -nargs=* Stab call SetTab()

" -------------
" Auto Commands
" -------------
if has('autocmd')
	" Enable filetype specific settings
	filetype plugin on
	filetype indent on

	" Autosource vimrc
	augroup VimAutoSource
		autocmd!
		autocmd BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc nested source %
	augroup END

	" Automatically resize splits on window resize
	augroup ResizeSplits
		autocmd!
		autocmd VimResized * :wincmd =
	augroup END

	" Filetype specific tab settings
	augroup FileTypeTabs
		autocmd!
		autocmd FileType ruby,eruby setlocal ts=2 sts=2 sw=2 expandtab
		autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
	augroup END

	" Filetype specific match pairs settings
	augroup FileTypePairs
		autocmd!
		" quotes
		autocmd FileType vim let b:delimitMate_quotes="'"
		" brackets
		autocmd FileType c,cpp let b:delimitMate_matchPairs="(:),[:],{:},<:>"
	augroup END
endif
